package com.phdroid.smsb.broadcast;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.telephony.SmsMessage;
import android.util.Log;
import com.phdroid.smsb.SmsPojo;
import com.phdroid.blackjack.ui.notify.TrayNotificationManager;
import com.phdroid.smsb.activity.BlockedSmsListActivity;
import com.phdroid.smsb.application.ApplicationController;
import com.phdroid.smsb.storage.ApplicationSettings;
import com.phdroid.smsb.storage.dao.Session;
import com.phdroid.smsb.storage.dao.SmsMessageEntry;
import com.phdroid.smsb.utility.NotificationUtility;
import com.phdroid.smsb.utility.SmsMessageTransferObject;

import java.util.ArrayList;
import java.util.List;

/**
 * SmsReceiver listens to broadcast event and triggers if SMS is received.
 */
public class SmsReceiver extends BroadcastReceiver {
	private static final String LOG_TAG = "com.phdroid.smsb";
	/* package */ static final String ACTION =
			"android.provider.Telephony.SMS_RECEIVED";

	private int mSpamMessagesCount = 0;
	private Session session = null;

	public void onReceive(Context context, Intent intent) {
		ApplicationSettings settings = new ApplicationSettings(context);
		session = new Session(settings, context.getContentResolver());

		if (intent.getAction().equals(ACTION)) {
			Log.v(this.getClass().getSimpleName(), "onReceive");
			/* The SMS-Messages are 'hiding' within the extras of the Intent. */
			Bundle bundle = intent.getExtras();
			if (bundle != null) {
				/* Get all messages contained in the Intent*/
				Object[] pdusObj = (Object[]) bundle.get("pdus");

				SmsMessageTransferObject[] messages = ConvertMessages(pdusObj);
				SmsMessageTransferObject[] spamMessages = getMessageProcessor().ProcessMessages(messages, session);
				SmsPojo[] smsPojos = saveMessages(spamMessages);

				mSpamMessagesCount += spamMessages.length;

				if (spamMessages.length > 0) {
					if (this.isOrderedBroadcast()) {
						//aborting broadcast. Using it with a priority tag should prevent anyone to receive these spam messages.
						this.abortBroadcast();
					} else {
						//todo: log this bullshit, send to our website and pray
					}

					Log.v(this.getClass().getSimpleName(), "Raise event");

					ApplicationController app = (ApplicationController) context.getApplicationContext();
					app.raiseNewSmsEvent(smsPojos);

					if (settings.showDisplayNotification()) {
						NotificationUtility.getInstance(context).showAutoGenerated(
								smsPojos,
								"Sms-Bouncer",
								(System.currentTimeMillis() / 1000L),
								BlockedSmsListActivity.class);
					}
				}
			}
		}
	}

	protected SmsMessageTransferObject[] ConvertMessages(Object[] pdusObj) {
		SmsMessageTransferObject[] messages = new SmsMessageTransferObject[pdusObj.length];
		for (int i = 0; i < pdusObj.length; i++) {
			SmsMessage msg = SmsMessage.createFromPdu((byte[]) pdusObj[i]);
			messages[i] = new SmsMessageTransferObject(msg);
		}
		return messages;
	}

	protected SmsPojo[] saveMessages(SmsMessageTransferObject[] messages) {
		List<SmsPojo> res = new ArrayList<SmsPojo>();
		for (SmsMessageTransferObject msg : messages) {
			SmsMessageEntry entry = session.insertMessage(msg);
			res.add(entry);
		}
		SmsPojo[] resArray = new SmsPojo[res.size()];
		return res.toArray(resArray);
	}

	protected IMessageProcessor getMessageProcessor() {
		return new MessageProcessor();
	}

	protected int getSpamMessagesCount() {
		return mSpamMessagesCount;
	}
}